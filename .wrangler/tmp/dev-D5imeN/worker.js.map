{
  "version": 3,
  "sources": ["wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../../../node_modules/wrangler/templates/middleware/loader-sw.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-EN1kss/middleware-insertion-facade.js", "../../../worker.js"],
  "sourceRoot": "/home/leer_key/Floppy/Barrel/operation-mad-duck/.wrangler/tmp/dev-D5imeN",
  "sourcesContent": ["", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "import {\n\t__facade_invoke__,\n\t__facade_register__,\n\t__facade_registerInternal__,\n\tAwaitable,\n\tDispatcher,\n\tIncomingRequest,\n\tMiddleware,\n} from \"./common\";\n\nexport { __facade_register__, __facade_registerInternal__ };\n\n// Miniflare 2's `EventTarget` follows the spec and doesn't allow exceptions to\n// be caught by `dispatchEvent`. Instead it has a custom `ThrowingEventTarget`\n// class that rethrows errors from event listeners in `dispatchEvent`.\n// We'd like errors to be propagated to the top-level `addEventListener`, so\n// we'd like to use `ThrowingEventTarget`. Unfortunately, `ThrowingEventTarget`\n// isn't exposed on the global scope, but `WorkerGlobalScope` (which extends\n// `ThrowingEventTarget`) is. Therefore, we get at it in this nasty way.\nlet __FACADE_EVENT_TARGET__: EventTarget;\nif ((globalThis as any).MINIFLARE) {\n\t__FACADE_EVENT_TARGET__ = new (Object.getPrototypeOf(WorkerGlobalScope))();\n} else {\n\t__FACADE_EVENT_TARGET__ = new EventTarget();\n}\n\nfunction __facade_isSpecialEvent__(\n\ttype: string\n): type is \"fetch\" | \"scheduled\" {\n\treturn type === \"fetch\" || type === \"scheduled\";\n}\nconst __facade__originalAddEventListener__ = globalThis.addEventListener;\nconst __facade__originalRemoveEventListener__ = globalThis.removeEventListener;\nconst __facade__originalDispatchEvent__ = globalThis.dispatchEvent;\n\nglobalThis.addEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.addEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalAddEventListener__(type, listener, options);\n\t}\n};\nglobalThis.removeEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.removeEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalRemoveEventListener__(type, listener, options);\n\t}\n};\nglobalThis.dispatchEvent = function (event) {\n\tif (__facade_isSpecialEvent__(event.type)) {\n\t\treturn __FACADE_EVENT_TARGET__.dispatchEvent(event);\n\t} else {\n\t\treturn __facade__originalDispatchEvent__(event);\n\t}\n};\n\ndeclare global {\n\tvar addMiddleware: typeof __facade_register__;\n\tvar addMiddlewareInternal: typeof __facade_registerInternal__;\n}\nglobalThis.addMiddleware = __facade_register__;\nglobalThis.addMiddlewareInternal = __facade_registerInternal__;\n\nconst __facade_waitUntil__ = Symbol(\"__facade_waitUntil__\");\nconst __facade_response__ = Symbol(\"__facade_response__\");\nconst __facade_dispatched__ = Symbol(\"__facade_dispatched__\");\n\nclass __Facade_ExtendableEvent__ extends Event {\n\t[__facade_waitUntil__]: Awaitable<unknown>[] = [];\n\n\twaitUntil(promise: Awaitable<any>) {\n\t\tif (!(this instanceof __Facade_ExtendableEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tthis[__facade_waitUntil__].push(promise);\n\t}\n}\n\ninterface FetchEventInit extends EventInit {\n\trequest: Request;\n\tpassThroughOnException: FetchEvent[\"passThroughOnException\"];\n}\n\nclass __Facade_FetchEvent__ extends __Facade_ExtendableEvent__ {\n\t#request: Request;\n\t#passThroughOnException: FetchEvent[\"passThroughOnException\"];\n\t[__facade_response__]?: Awaitable<Response>;\n\t[__facade_dispatched__] = false;\n\n\tconstructor(type: \"fetch\", init: FetchEventInit) {\n\t\tsuper(type);\n\t\tthis.#request = init.request;\n\t\tthis.#passThroughOnException = init.passThroughOnException;\n\t}\n\n\tget request() {\n\t\treturn this.#request;\n\t}\n\n\trespondWith(response: Awaitable<Response>) {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tif (this[__facade_response__] !== undefined) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"FetchEvent.respondWith() has already been called; it can only be called once.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tif (this[__facade_dispatched__]) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"Too late to call FetchEvent.respondWith(). It must be called synchronously in the event handler.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tthis.stopImmediatePropagation();\n\t\tthis[__facade_response__] = response;\n\t}\n\n\tpassThroughOnException() {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#passThroughOnException();\n\t}\n}\n\ninterface ScheduledEventInit extends EventInit {\n\tscheduledTime: number;\n\tcron: string;\n\tnoRetry: ScheduledEvent[\"noRetry\"];\n}\n\nclass __Facade_ScheduledEvent__ extends __Facade_ExtendableEvent__ {\n\t#scheduledTime: number;\n\t#cron: string;\n\t#noRetry: ScheduledEvent[\"noRetry\"];\n\n\tconstructor(type: \"scheduled\", init: ScheduledEventInit) {\n\t\tsuper(type);\n\t\tthis.#scheduledTime = init.scheduledTime;\n\t\tthis.#cron = init.cron;\n\t\tthis.#noRetry = init.noRetry;\n\t}\n\n\tget scheduledTime() {\n\t\treturn this.#scheduledTime;\n\t}\n\n\tget cron() {\n\t\treturn this.#cron;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\n__facade__originalAddEventListener__(\"fetch\", (event) => {\n\tconst ctx: ExecutionContext = {\n\t\twaitUntil: event.waitUntil.bind(event),\n\t\tpassThroughOnException: event.passThroughOnException.bind(event),\n\t};\n\n\tconst __facade_sw_dispatch__: Dispatcher = function (type, init) {\n\t\tif (type === \"scheduled\") {\n\t\t\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\t\t\tscheduledTime: Date.now(),\n\t\t\t\tcron: init.cron ?? \"\",\n\t\t\t\tnoRetry() {},\n\t\t\t});\n\n\t\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\t\t}\n\t};\n\n\tconst __facade_sw_fetch__: Middleware = function (request, _env, ctx) {\n\t\tconst facadeEvent = new __Facade_FetchEvent__(\"fetch\", {\n\t\t\trequest,\n\t\t\tpassThroughOnException: ctx.passThroughOnException,\n\t\t});\n\n\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\tfacadeEvent[__facade_dispatched__] = true;\n\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\n\t\tconst response = facadeEvent[__facade_response__];\n\t\tif (response === undefined) {\n\t\t\tthrow new Error(\"No response!\"); // TODO: proper error message\n\t\t}\n\t\treturn response;\n\t};\n\n\tevent.respondWith(\n\t\t__facade_invoke__(\n\t\t\tevent.request as IncomingRequest,\n\t\t\tglobalThis,\n\t\t\tctx,\n\t\t\t__facade_sw_dispatch__,\n\t\t\t__facade_sw_fetch__\n\t\t)\n\t);\n});\n\n__facade__originalAddEventListener__(\"scheduled\", (event) => {\n\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\tscheduledTime: event.scheduledTime,\n\t\tcron: event.cron,\n\t\tnoRetry: event.noRetry.bind(event),\n\t});\n\n\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n});\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport { __facade_registerInternal__ } from \"/home/leer_key/Floppy/Barrel/operation-mad-duck/node_modules/wrangler/templates/middleware/loader-sw.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/leer_key/Floppy/Barrel/operation-mad-duck/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/leer_key/Floppy/Barrel/operation-mad-duck/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\t__facade_registerInternal__([__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default])", "/**\n * The HTML formatted CSS style block which includes global styling\n * for all HTML responses. These rules are a minimum requirement\n * to display data properly on the flagPage, boardPage, and resetPage.\n */\nconst style = `\n<style>\nbody {\n  background-color: #F5F5F7;\n  color: #1d1d1f;\n  font-family: system-ui;\n  height: 100%;\n  margin: 0;\n}\n\nh1 {\n  background-color: white;\n  border-radius: 18px;\n  color: black;\n  padding: 18px;\n  text-align: center;\n}\n\nh2 {\n  background-color: green;\n  border-radius: 18px;\n  color: white;\n  padding: 18px;\n  text-align: center;\n}\n\ntable {\n  background-color: white;\n  border-collapse: collapse;\n  border-radius: 18px;\n  color: black;\n  margin: 18px;\n  min-width: 100%;\n  padding: 18px;\n  text-align: left;\n}\n\nth, td {\n  background-color: white;\n  border: 2px solid #F5F5F7;\n  border-collapse: collapse;\n  overflow: hidden;\n  padding: 7px;\n  text-overflow: ellipsis;\n}\n\n.container {\n  align-items: center;\n  display: flex;\n  flex-wrap: wrap;\n  height: 100%;\n  justify-content: center;\n}\n\n.subcontainer {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 95%;\n  min-width: 85%;\n  text-align:center;\n}\n</style>\n`;\n\n\n/**\n * The toolbar is persistent across the scoreboard, reset, and settings pages,\n * allowing for easier navigation.\n */\nconst toolbar = `\n<div id=\"toolbar\" style=\"background-color: #333; color: white; padding: 10px;\">\n    <a href=\"/../board\" style=\"color: white; margin-right: 15px;\">Scoreboard</a>\n    <a href=\"/../reset\" style=\"color: white; margin-right: 15px;\">Reset</a>\n    <a href=\"https://github.com/OpMadDuck/operation-mad-duck\" target=\"_blank\" style=\"color: white; margin-right: 15px;\">GitHub</a>\n    <a href=\"/../settings\" style=\"color: white; margin-right: 15px;\">Settings</a>\n</div>\n`;\n\n/**\n * flagPage consumes a flag object and returns a response body as a string.\n * The response body represents a flag waypoint - the content shown to a\n * user when they scan the appropriate QR code. Additional code is included in\n * the body of the response (see below).\n * @param {Object} flag\n */\nconst flagPage = (flag) => `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Operation Mad Duck | ${flag.name} Flag</title>\n    ${style}\n  </head>\n  <body>\n    <div class=\"container\">\n        <div class=\"subcontainer\">\n          <h1>${flag.name} Flag</h1>\n          <h2>Capture!</h2>\n        </div>\n    </div>\n  </body>\n  <script>\n    // Save the query strings in the URL\n    const queryString = window.location.search;\n\n    // Parse the saved search parameters\n    const urlParams = new URLSearchParams(queryString);\n\n    // Get the value of the ID (must be a value between 1-18)\n    const id = urlParams.get('id')\n\n    // Prevent the user from seeing the ID in the URL bar\n    window.history.replaceState(null, \"\", \"/\");\n\n    /**\n     * captureFlag consumes a contract in the form of a String and posts it back \n     * to the Worker for logging. If the server accepts the contract, the user \n     * will be redirected to prevent them from accessing the page again directly. \n     * If the server encounters an error, then the user will be prompted to resubmit \n     * their contract.\n     * @param {String} contract\n     */\n    var captureFlag = (contract) => {\n      if (contract) {\n        fetch(\"/capture?id=\" + id, { method: \"POST\", body: contract })\n        .then((response) => {\n          if (!response.ok) {\n            alert(\"HTTP Error \" + response.status + \". Please try again.\");\n          } else {\n            window.location.replace(\"/confirm\");\n          }\n        })\n      }\n    }\n\n    /**\n     * requestContract prompts the user to submit their team's contract to \n     * capture the flag, and then passes the result to the captureFlag function.\n     * @param {Event} _event\n     */\n    var requestContract = (_event) => {\n      let contract = prompt(\"Please enter your team's contract:\");\n      captureFlag(contract)\n    }\n\n    /**\n     * Wait for the user to tap/click the 'Capture!' button on the page.\n     */\n    document.querySelector(\"h2\").addEventListener(\"click\", requestContract)\n  </script>\n</html>\n`;\n\n/**\n * boardPage consumes an array of all flag objects and returns a response\n * body as a string. The response body represents a score board for all\n * flags, and the total scores for each team. Every contract logged is made\n * visible on the board. Additional code is included in the body of the response.\n * @param {Array<Object>} flags\n */\nconst boardPage = (flags) => `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Operation Mad Duck | Scoreboard</title>\n    ${style}\n  </head>\n  <body>\n    ${toolbar}\n    <div class=\"container\">\n      <div class=\"subcontainer\">\n        <table>\n          <thead>\n            <tr>\n              <th style=\"width:15%\">Name</th>\n              <th style=\"width:65%\">Contracts</th>\n              <th style=\"width:10%\">Red</th>\n              <th style=\"width:10%\">Blue</th>\n            </tr>\n          </thead>\n          <tbody id='scoreBoard'>\n          </tbody>\n          <tr>\n            <th></th>\n            <th></th>\n            <th id='redSum'></th>\n            <th id='blueSum'></th>\n          </tr>\n        </table>\n      </div>\n     </div>\n  </body>\n  <script>\n    /**\n     * Instantiate the array of flags passed in from the worker.\n     */\n    const flags = ${flags}\n\n    /**\n     * Identify the score board table by its HTML ID\n     */\n    const scoreBoard = document.querySelector(\"#scoreBoard\")\n\n    /**\n     * Instantiate the total point values for each team\n     */\n    var redSum = 0\n    var blueSum = 0\n\n    flags.forEach((flag) => {\n      /**\n       * Create the HTML elements for the row\n       * that will represent this flag, including:\n       * - The flag name\n       * - The contracts issued for this flag\n       * - The red team's points for this flag\n       * - The blue team's points for this flag\n       */\n      var row = document.createElement(\"tr\")\n      var name = document.createElement(\"td\")\n      var contracts = document.createElement(\"td\")\n      var red = document.createElement(\"td\")\n      var blue = document.createElement(\"td\")\n\n      /**\n       * Set the name of the flag\n       */\n      name.innerHTML = flag.name\n\n      /** \n       * Determine the winning contract and the team\n       * which won this flag. Assign the correct point\n       * value to the winning team and add it to the\n       * total point value for the team.\n       */\n      let winningContractID;\n      if(flag.winner) {\n        let winnerArray = flag.winner.split(',')\n        winningContractID = parseInt(winnerArray[1])\n        if (winnerArray[0] === 'red') {\n          redSum += flag.red\n          red.innerHTML = flag.red\n        } else if (winnerArray[0] === 'blue') {\n          blueSum += flag.blue\n          blue.innerHTML = flag.blue\n        }\n      }\n\n      /**\n       * Style the contract log, italicizing the improper\n       * contracts, and bolding the proper/winning contract.\n       */\n      for (let i = 0; i < flag.contracts.length; i++) {\n        if (i === winningContractID) {\n          contracts.innerHTML += '<strong>' + flag.times[i] + 'Z - ' + flag.contracts[i] + '</strong><br>'\n        } else {\n          contracts.innerHTML += '<em>' + flag.times[i] + 'Z - ' + flag.contracts[i] + '</em><br>'\n        }\n      }\n\n      /**\n       * Append the newly loaded data into the table row\n       */\n      row.appendChild(name)\n      row.appendChild(contracts)\n      row.appendChild(red)\n      row.appendChild(blue)\n      scoreBoard.appendChild(row)\n    })\n\n    /** \n     * Set the sum total values in the table\n     */\n    document.querySelector(\"#redSum\").innerHTML = redSum\n    document.querySelector(\"#blueSum\").innerHTML = blueSum\n  </script>\n</html>\n`;\n\n/**\n * resetPage returns a response body as a string. The response body contains\n * a button which will revert the Worker KV database back to its original\n * state. There is no way to restore the data once the reset occurs.\n */\nconst resetPage = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Operation Mad Duck | Reset</title>\n    ${style}\n  </head>\n  <body>\n    ${toolbar}\n    <div class=\"container\">\n      <div class=\"subcontainer\">\n        <h2>Reset!</h2>\n      </div>\n     </div>\n  </body>\n  <script>\n    /**\n     * reset consumes a confirmation in the form of a String and posts it back \n     * to the Worker to reset the KV store. If the server accepts the confirmation,\n     * the user will be redirected to the score board. If the server encounters an error, \n     * then the user will be prompted to reattempt the reset.\n     * @param {String} confirmation\n     */\n    var reset = (confirmation) => {\n      if (confirmation === 'RESETMADDUCK') {\n        fetch(\"/reset\", { method: \"POST\", body: confirmation })\n        .then((response) => {\n          if (!response.ok) {\n            alert(\"HTTP Error \" + response.status + \". Please try again.\");\n          } else {\n            window.location.href = \"/board\";\n          }\n        })\n      } else {\n        alert(\"Please enter instructor password.\")\n      }\n    }\n\n    /**\n     * requestConfirmation prompts the user to submit their proper confirmation \n     * message to reset the game.\n     * @param {Event} _event\n     */\n    var requestConfirmation = (_event) => {\n      let confirmation = prompt(\"Please enter instructor password to reset the scoreboard:\");\n      reset(confirmation)\n    }\n\n    /**\n     * Wait for the user to tap/click the 'Reset!' button on the page.\n     */\n    document.querySelector(\"h2\").addEventListener(\"click\", requestConfirmation)\n  </script>\n</html>\n`;\n\n/**\n * settingsPage (WIP) should return response bodies as strings, which can modify\n * various attributes of the simulation.\n */\nconst settingsPage = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>Operation Mad Duck | Settings</title>\n    ${style}\n  </head>\n  <body>\n    ${toolbar}\n    <div class=\"container\">\n      <div class=\"subcontainer\">\n        <table>\n          <thead>\n            <tr>\n              <th style=\"width:15%\">Setting</th>\n              <th style=\"width:65%\">Description</th>\n              <th style=\"width:10%\">On</th>\n              <th style=\"width:10%\">Off</th>\n            </tr>\n          </thead>\n          <tbody id='settings'>\n          </tbody>\n          <tr>\n            <th></th>\n            <th></th>\n            <th id='on'></th>\n            <th id='off'></th>\n          </tr>\n        </table>\n      </div>\n     </div>\n  </body>\n</html>\n`;\n\n/**\n * getFlag consumes a request forwarded by the handleRequest() function\n * and supplies a dynamic Response containing a flagPage.\n * @param {Request} request\n * @returns {Response}\n */\nasync function getFlag(request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n  const flag = await FLAGS.get(id.toString(), { type: \"json\" });\n  if (flag === null) {\n    return new Response(\"The requested resource could not be found \uD83E\uDD86\", {\n      status: 404,\n    });\n  }\n\n  const body = flagPage(flag);\n  return new Response(body, {\n    headers: { \"Content-Type\": \"text/html\" },\n  });\n}\n\n/**\n * captureFlag consumes a request forwarded by the handleRequest() function\n * and runs a check on the submitted contract prior to logging it's contents.\n * After passing all required checks, data is updated in the KV store.\n * @param {Request} request\n * @returns {Response}\n */\nasync function captureFlag(request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n    const contract = await request.text();\n    const flag = await FLAGS.get(id, { type: \"json\" });\n    let winner;\n    if (flag.winner) {\n      winner = flag.winner;\n    } else {\n      winner = await check(contract, id);\n    }\n    await FLAGS.put(\n      id,\n      JSON.stringify({\n        name: flag.name,\n        times: flag.times.concat(new Date().toTimeString().split(\" \")[0]),\n        contracts: flag.contracts.concat(contract),\n        red: flag.red,\n        blue: flag.blue,\n        winner: winner,\n      })\n    );\n    return new Response(null, { status: 200 });\n  } catch (err) {\n    return new Response(err, { status: 500 });\n  }\n}\n\n/**\n * check consumes a contract statement and flag ID from the captureFlag()\n * function. If the supplied contract is correct, then a result is returned\n * bearing the winning team and an index of the winning contract\n * @param {String} contract\n * @param {String} id\n * @returns {String} winningTeam,winningContract\n */\nasync function check(contract, id) {\n  const flag = await FLAGS.get(id, { type: \"json\" });\n  const redExp = new RegExp(\n    `Red HQ(,|\\\\s)[\\\\S\\\\s]*?(,|\\\\s)Touchdown ${flag.name}`,\n    \"i\"\n  );\n  const blueExp = new RegExp(\n    `Blue HQ(,|\\\\s)[\\\\S\\\\s]*?(,|\\\\s)Touchdown ${flag.name}`,\n    \"i\"\n  );\n  if (redExp.test(contract)) {\n    return \"red,\" + flag.contracts.length;\n  } else if (blueExp.test(contract)) {\n    return \"blue,\" + flag.contracts.length;\n  } else {\n    return null;\n  }\n}\n\n/**\n * getBoard consumes a request forwarded by the handleRequest() function\n * and returns a response with boardPage in the body. All data must be\n * retrieved from the KV store prior to issuing a Response.\n * @returns {Response}\n */\nasync function getBoard() {\n  const promises = [];\n\n  for (const key of Array(18).keys()) {\n    promises.push(FLAGS.get((key + 1).toString(), { type: \"json\" }));\n  }\n\n  const data = await Promise.all(promises);\n  const body = boardPage(JSON.stringify(data));\n  return new Response(body, {\n    headers: { \"Content-Type\": \"text/html\" },\n  });\n}\n\n\nasync function getSettings() {\n  return new Response(settingsPage, {\n    headers: { \"Content-Type\": \"text/html\" },\n  });\n}\n\n\n\n\n\n/**\n * resetBoard consumes a request forwarded by the handleRequest() function\n * and runs a check on the submitted confirmation message prior to resetting\n * the game state. After passing all required checks, data is reset in the KV store.\n * @param {Request} request\n * @returns {Response}\n */\nasync function resetBoard(request) {\n  if (request.method === \"POST\") {\n    const confirmation = await request.text();\n    if (confirmation === \"RESETMADDUCK\") {\n      await FLAGS.put(\n        \"1\",\n        '{\"name\":\"Broncos\", \"times\":[], \"contracts\":[], \"red\":800, \"blue\":800, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"2\",\n        '{\"name\":\"Buccaneers\", \"times\":[], \"contracts\":[], \"red\":0, \"blue\":1200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"3\",\n        '{\"name\":\"Chargers\", \"times\":[], \"contracts\":[], \"red\":400, \"blue\":400, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"4\",\n        '{\"name\":\"Chiefs\", \"times\":[], \"contracts\":[], \"red\":800, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"5\",\n        '{\"name\":\"Commanders\", \"times\":[], \"contracts\":[], \"red\":400, \"blue\":400, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"6\",\n        '{\"name\":\"Cowboys\", \"times\":[], \"contracts\":[], \"red\":600, \"blue\":400, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"7\",\n        '{\"name\":\"Dolphins\", \"times\":[], \"contracts\":[], \"red\":600, \"blue\":600, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"8\",\n        '{\"name\":\"Eagles\", \"times\":[], \"contracts\":[], \"red\":400, \"blue\":400, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"9\",\n        '{\"name\":\"Giants\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":600, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"10\",\n        '{\"name\":\"Jaguars\", \"times\":[], \"contracts\":[], \"red\":800, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"11\",\n        '{\"name\":\"Jets\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"12\",\n        '{\"name\":\"Patriots\", \"times\":[], \"contracts\":[], \"red\":800, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"13\",\n        '{\"name\":\"Ravens\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"14\",\n        '{\"name\":\"Saints\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":600, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"15\",\n        '{\"name\":\"Seahawks\", \"times\":[], \"contracts\":[], \"red\":800, \"blue\":200, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"16\",\n        '{\"name\":\"Texans\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":800, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"17\",\n        '{\"name\":\"Titans\", \"times\":[], \"contracts\":[], \"red\":1200, \"blue\":600, \"winner\":null}'\n      );\n      await FLAGS.put(\n        \"18\",\n        '{\"name\":\"Vikings\", \"times\":[], \"contracts\":[], \"red\":200, \"blue\":800, \"winner\":null}'\n      );\n      return new Response(null, { status: 200 });\n    }\n  } else {\n    return new Response(resetPage, {\n      headers: { \"Content-Type\": \"text/html\" },\n    });\n  }\n}\n\n/**\n * confirmContract will notify the user that their submitted\n * contract has been logged successfully by the Worker.\n * @returns {Response}\n */\nasync function confirmContract() {\n  return new Response(\"Contract received \uD83D\uDCAC\", {\n    status: 200,\n    headers: { \"Clear-Site-Data\": \"*\" },\n  });\n}\n\n/**\n * handleRequest consumes a request forwarded by the main event listener.\n * Depending on the URL path, this function defers Responses to the functions\n * written above. If no suitable function is found for the requested path,\n * a 404 Not Found response is issued to the user. Quack!\n * @param {Request} request\n * @returns {Response}\n */\nasync function handleRequest(request) {\n  const url = new URL(request.url);\n  const path = url.pathname;\n\n  switch (path) {\n    case \"/flag\":\n      return getFlag(request);\n    case \"/capture\":\n      return captureFlag(request);\n    case \"/board\":\n      return getBoard();\n    case \"/settings\":\n      return getSettings();\n    case \"/reset\":\n      return resetBoard(request);\n    case \"/confirm\":\n      return confirmContract();\n    default:\n      return new Response(\"The requested resource could not be found \uD83E\uDD86\", {\n        status: 404,\n      });\n  }\n}\n\n/**\n * Listen for a fetch event. When such an event occurs, respond with\n * the data provided by the handleRequest() function above.\n */\naddEventListener(\"fetch\", (event) => {\n  event.respondWith(handleRequest(event.request));\n});\n"],
  "mappings": "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",
  "names": ["import_middleware_insertion_facade", "import_middleware_insertion_facade", "ctx", "import_middleware_insertion_facade", "import_middleware_insertion_facade", "import_middleware_insertion_facade"]
}
